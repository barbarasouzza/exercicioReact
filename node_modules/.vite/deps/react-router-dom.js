import {
  __commonJS,
  __toESM,
  require_react
} from "./chunk-GO5U22FR.js";

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment2 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment2;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
          return test2[n2];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x3) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x3) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement2, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x3, y3) {
        if (x3 === y3) {
          return x3 !== 0 || 1 / x3 === 1 / y3;
        } else {
          return x3 !== x3 && y3 !== y3;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement2(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement2(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

// node_modules/history/index.js
var Action;
(function(Action2) {
  Action2["Pop"] = "POP";
  Action2["Push"] = "PUSH";
  Action2["Replace"] = "REPLACE";
})(Action || (Action = {}));
var readOnly = true ? function(obj) {
  return Object.freeze(obj);
} : function(obj) {
  return obj;
};
function warning(cond, message) {
  if (!cond) {
    if (typeof console !== "undefined")
      console.warn(message);
    try {
      throw new Error(message);
    } catch (e) {
    }
  }
}
var BeforeUnloadEventType = "beforeunload";
var HashChangeEventType = "hashchange";
var PopStateEventType = "popstate";
function createBrowserHistory(options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$window = _options.window, window2 = _options$window === void 0 ? document.defaultView : _options$window;
  var globalHistory = window2.history;
  function getIndexAndLocation() {
    var _window$location = window2.location, pathname = _window$location.pathname, search = _window$location.search, hash = _window$location.hash;
    var state = globalHistory.state || {};
    return [state.idx, readOnly({
      pathname,
      search,
      hash,
      state: state.usr || null,
      key: state.key || "default"
    })];
  }
  var blockedPopTx = null;
  function handlePop() {
    if (blockedPopTx) {
      blockers.call(blockedPopTx);
      blockedPopTx = null;
    } else {
      var nextAction = Action.Pop;
      var _getIndexAndLocation = getIndexAndLocation(), nextIndex = _getIndexAndLocation[0], nextLocation = _getIndexAndLocation[1];
      if (blockers.length) {
        if (nextIndex != null) {
          var delta = index - nextIndex;
          if (delta) {
            blockedPopTx = {
              action: nextAction,
              location: nextLocation,
              retry: function retry() {
                go(delta * -1);
              }
            };
            go(delta);
          }
        } else {
          true ? warning(
            false,
            "You are trying to block a POP navigation to a location that was not created by the history library. The block will fail silently in production, but in general you should do all navigation with the history library (instead of using window.history.pushState directly) to avoid this situation."
          ) : void 0;
        }
      } else {
        applyTx(nextAction);
      }
    }
  }
  window2.addEventListener(PopStateEventType, handlePop);
  var action = Action.Pop;
  var _getIndexAndLocation2 = getIndexAndLocation(), index = _getIndexAndLocation2[0], location = _getIndexAndLocation2[1];
  var listeners = createEvents();
  var blockers = createEvents();
  if (index == null) {
    index = 0;
    globalHistory.replaceState(_extends({}, globalHistory.state, {
      idx: index
    }), "");
  }
  function createHref(to) {
    return typeof to === "string" ? to : createPath(to);
  }
  function getNextLocation(to, state) {
    if (state === void 0) {
      state = null;
    }
    return readOnly(_extends({
      pathname: location.pathname,
      hash: "",
      search: ""
    }, typeof to === "string" ? parsePath(to) : to, {
      state,
      key: createKey()
    }));
  }
  function getHistoryStateAndUrl(nextLocation, index2) {
    return [{
      usr: nextLocation.state,
      key: nextLocation.key,
      idx: index2
    }, createHref(nextLocation)];
  }
  function allowTx(action2, location2, retry) {
    return !blockers.length || (blockers.call({
      action: action2,
      location: location2,
      retry
    }), false);
  }
  function applyTx(nextAction) {
    action = nextAction;
    var _getIndexAndLocation3 = getIndexAndLocation();
    index = _getIndexAndLocation3[0];
    location = _getIndexAndLocation3[1];
    listeners.call({
      action,
      location
    });
  }
  function push(to, state) {
    var nextAction = Action.Push;
    var nextLocation = getNextLocation(to, state);
    function retry() {
      push(to, state);
    }
    if (allowTx(nextAction, nextLocation, retry)) {
      var _getHistoryStateAndUr = getHistoryStateAndUrl(nextLocation, index + 1), historyState = _getHistoryStateAndUr[0], url = _getHistoryStateAndUr[1];
      try {
        globalHistory.pushState(historyState, "", url);
      } catch (error) {
        window2.location.assign(url);
      }
      applyTx(nextAction);
    }
  }
  function replace(to, state) {
    var nextAction = Action.Replace;
    var nextLocation = getNextLocation(to, state);
    function retry() {
      replace(to, state);
    }
    if (allowTx(nextAction, nextLocation, retry)) {
      var _getHistoryStateAndUr2 = getHistoryStateAndUrl(nextLocation, index), historyState = _getHistoryStateAndUr2[0], url = _getHistoryStateAndUr2[1];
      globalHistory.replaceState(historyState, "", url);
      applyTx(nextAction);
    }
  }
  function go(delta) {
    globalHistory.go(delta);
  }
  var history = {
    get action() {
      return action;
    },
    get location() {
      return location;
    },
    createHref,
    push,
    replace,
    go,
    back: function back() {
      go(-1);
    },
    forward: function forward() {
      go(1);
    },
    listen: function listen(listener) {
      return listeners.push(listener);
    },
    block: function block(blocker) {
      var unblock = blockers.push(blocker);
      if (blockers.length === 1) {
        window2.addEventListener(BeforeUnloadEventType, promptBeforeUnload);
      }
      return function() {
        unblock();
        if (!blockers.length) {
          window2.removeEventListener(BeforeUnloadEventType, promptBeforeUnload);
        }
      };
    }
  };
  return history;
}
function createHashHistory(options) {
  if (options === void 0) {
    options = {};
  }
  var _options2 = options, _options2$window = _options2.window, window2 = _options2$window === void 0 ? document.defaultView : _options2$window;
  var globalHistory = window2.history;
  function getIndexAndLocation() {
    var _parsePath = parsePath(window2.location.hash.substr(1)), _parsePath$pathname = _parsePath.pathname, pathname = _parsePath$pathname === void 0 ? "/" : _parsePath$pathname, _parsePath$search = _parsePath.search, search = _parsePath$search === void 0 ? "" : _parsePath$search, _parsePath$hash = _parsePath.hash, hash = _parsePath$hash === void 0 ? "" : _parsePath$hash;
    var state = globalHistory.state || {};
    return [state.idx, readOnly({
      pathname,
      search,
      hash,
      state: state.usr || null,
      key: state.key || "default"
    })];
  }
  var blockedPopTx = null;
  function handlePop() {
    if (blockedPopTx) {
      blockers.call(blockedPopTx);
      blockedPopTx = null;
    } else {
      var nextAction = Action.Pop;
      var _getIndexAndLocation4 = getIndexAndLocation(), nextIndex = _getIndexAndLocation4[0], nextLocation = _getIndexAndLocation4[1];
      if (blockers.length) {
        if (nextIndex != null) {
          var delta = index - nextIndex;
          if (delta) {
            blockedPopTx = {
              action: nextAction,
              location: nextLocation,
              retry: function retry() {
                go(delta * -1);
              }
            };
            go(delta);
          }
        } else {
          true ? warning(
            false,
            "You are trying to block a POP navigation to a location that was not created by the history library. The block will fail silently in production, but in general you should do all navigation with the history library (instead of using window.history.pushState directly) to avoid this situation."
          ) : void 0;
        }
      } else {
        applyTx(nextAction);
      }
    }
  }
  window2.addEventListener(PopStateEventType, handlePop);
  window2.addEventListener(HashChangeEventType, function() {
    var _getIndexAndLocation5 = getIndexAndLocation(), nextLocation = _getIndexAndLocation5[1];
    if (createPath(nextLocation) !== createPath(location)) {
      handlePop();
    }
  });
  var action = Action.Pop;
  var _getIndexAndLocation6 = getIndexAndLocation(), index = _getIndexAndLocation6[0], location = _getIndexAndLocation6[1];
  var listeners = createEvents();
  var blockers = createEvents();
  if (index == null) {
    index = 0;
    globalHistory.replaceState(_extends({}, globalHistory.state, {
      idx: index
    }), "");
  }
  function getBaseHref() {
    var base = document.querySelector("base");
    var href = "";
    if (base && base.getAttribute("href")) {
      var url = window2.location.href;
      var hashIndex = url.indexOf("#");
      href = hashIndex === -1 ? url : url.slice(0, hashIndex);
    }
    return href;
  }
  function createHref(to) {
    return getBaseHref() + "#" + (typeof to === "string" ? to : createPath(to));
  }
  function getNextLocation(to, state) {
    if (state === void 0) {
      state = null;
    }
    return readOnly(_extends({
      pathname: location.pathname,
      hash: "",
      search: ""
    }, typeof to === "string" ? parsePath(to) : to, {
      state,
      key: createKey()
    }));
  }
  function getHistoryStateAndUrl(nextLocation, index2) {
    return [{
      usr: nextLocation.state,
      key: nextLocation.key,
      idx: index2
    }, createHref(nextLocation)];
  }
  function allowTx(action2, location2, retry) {
    return !blockers.length || (blockers.call({
      action: action2,
      location: location2,
      retry
    }), false);
  }
  function applyTx(nextAction) {
    action = nextAction;
    var _getIndexAndLocation7 = getIndexAndLocation();
    index = _getIndexAndLocation7[0];
    location = _getIndexAndLocation7[1];
    listeners.call({
      action,
      location
    });
  }
  function push(to, state) {
    var nextAction = Action.Push;
    var nextLocation = getNextLocation(to, state);
    function retry() {
      push(to, state);
    }
    true ? warning(nextLocation.pathname.charAt(0) === "/", "Relative pathnames are not supported in hash history.push(" + JSON.stringify(to) + ")") : void 0;
    if (allowTx(nextAction, nextLocation, retry)) {
      var _getHistoryStateAndUr3 = getHistoryStateAndUrl(nextLocation, index + 1), historyState = _getHistoryStateAndUr3[0], url = _getHistoryStateAndUr3[1];
      try {
        globalHistory.pushState(historyState, "", url);
      } catch (error) {
        window2.location.assign(url);
      }
      applyTx(nextAction);
    }
  }
  function replace(to, state) {
    var nextAction = Action.Replace;
    var nextLocation = getNextLocation(to, state);
    function retry() {
      replace(to, state);
    }
    true ? warning(nextLocation.pathname.charAt(0) === "/", "Relative pathnames are not supported in hash history.replace(" + JSON.stringify(to) + ")") : void 0;
    if (allowTx(nextAction, nextLocation, retry)) {
      var _getHistoryStateAndUr4 = getHistoryStateAndUrl(nextLocation, index), historyState = _getHistoryStateAndUr4[0], url = _getHistoryStateAndUr4[1];
      globalHistory.replaceState(historyState, "", url);
      applyTx(nextAction);
    }
  }
  function go(delta) {
    globalHistory.go(delta);
  }
  var history = {
    get action() {
      return action;
    },
    get location() {
      return location;
    },
    createHref,
    push,
    replace,
    go,
    back: function back() {
      go(-1);
    },
    forward: function forward() {
      go(1);
    },
    listen: function listen(listener) {
      return listeners.push(listener);
    },
    block: function block(blocker) {
      var unblock = blockers.push(blocker);
      if (blockers.length === 1) {
        window2.addEventListener(BeforeUnloadEventType, promptBeforeUnload);
      }
      return function() {
        unblock();
        if (!blockers.length) {
          window2.removeEventListener(BeforeUnloadEventType, promptBeforeUnload);
        }
      };
    }
  };
  return history;
}
function createMemoryHistory(options) {
  if (options === void 0) {
    options = {};
  }
  var _options3 = options, _options3$initialEntr = _options3.initialEntries, initialEntries = _options3$initialEntr === void 0 ? ["/"] : _options3$initialEntr, initialIndex = _options3.initialIndex;
  var entries = initialEntries.map(function(entry) {
    var location2 = readOnly(_extends({
      pathname: "/",
      search: "",
      hash: "",
      state: null,
      key: createKey()
    }, typeof entry === "string" ? parsePath(entry) : entry));
    true ? warning(location2.pathname.charAt(0) === "/", "Relative pathnames are not supported in createMemoryHistory({ initialEntries }) (invalid entry: " + JSON.stringify(entry) + ")") : void 0;
    return location2;
  });
  var index = clamp(initialIndex == null ? entries.length - 1 : initialIndex, 0, entries.length - 1);
  var action = Action.Pop;
  var location = entries[index];
  var listeners = createEvents();
  var blockers = createEvents();
  function createHref(to) {
    return typeof to === "string" ? to : createPath(to);
  }
  function getNextLocation(to, state) {
    if (state === void 0) {
      state = null;
    }
    return readOnly(_extends({
      pathname: location.pathname,
      search: "",
      hash: ""
    }, typeof to === "string" ? parsePath(to) : to, {
      state,
      key: createKey()
    }));
  }
  function allowTx(action2, location2, retry) {
    return !blockers.length || (blockers.call({
      action: action2,
      location: location2,
      retry
    }), false);
  }
  function applyTx(nextAction, nextLocation) {
    action = nextAction;
    location = nextLocation;
    listeners.call({
      action,
      location
    });
  }
  function push(to, state) {
    var nextAction = Action.Push;
    var nextLocation = getNextLocation(to, state);
    function retry() {
      push(to, state);
    }
    true ? warning(location.pathname.charAt(0) === "/", "Relative pathnames are not supported in memory history.push(" + JSON.stringify(to) + ")") : void 0;
    if (allowTx(nextAction, nextLocation, retry)) {
      index += 1;
      entries.splice(index, entries.length, nextLocation);
      applyTx(nextAction, nextLocation);
    }
  }
  function replace(to, state) {
    var nextAction = Action.Replace;
    var nextLocation = getNextLocation(to, state);
    function retry() {
      replace(to, state);
    }
    true ? warning(location.pathname.charAt(0) === "/", "Relative pathnames are not supported in memory history.replace(" + JSON.stringify(to) + ")") : void 0;
    if (allowTx(nextAction, nextLocation, retry)) {
      entries[index] = nextLocation;
      applyTx(nextAction, nextLocation);
    }
  }
  function go(delta) {
    var nextIndex = clamp(index + delta, 0, entries.length - 1);
    var nextAction = Action.Pop;
    var nextLocation = entries[nextIndex];
    function retry() {
      go(delta);
    }
    if (allowTx(nextAction, nextLocation, retry)) {
      index = nextIndex;
      applyTx(nextAction, nextLocation);
    }
  }
  var history = {
    get index() {
      return index;
    },
    get action() {
      return action;
    },
    get location() {
      return location;
    },
    createHref,
    push,
    replace,
    go,
    back: function back() {
      go(-1);
    },
    forward: function forward() {
      go(1);
    },
    listen: function listen(listener) {
      return listeners.push(listener);
    },
    block: function block(blocker) {
      return blockers.push(blocker);
    }
  };
  return history;
}
function clamp(n2, lowerBound, upperBound) {
  return Math.min(Math.max(n2, lowerBound), upperBound);
}
function promptBeforeUnload(event) {
  event.preventDefault();
  event.returnValue = "";
}
function createEvents() {
  var handlers = [];
  return {
    get length() {
      return handlers.length;
    },
    push: function push(fn) {
      handlers.push(fn);
      return function() {
        handlers = handlers.filter(function(handler) {
          return handler !== fn;
        });
      };
    },
    call: function call(arg) {
      handlers.forEach(function(fn) {
        return fn && fn(arg);
      });
    }
  };
}
function createKey() {
  return Math.random().toString(36).substr(2, 8);
}
function createPath(_ref) {
  var _ref$pathname = _ref.pathname, pathname = _ref$pathname === void 0 ? "/" : _ref$pathname, _ref$search = _ref.search, search = _ref$search === void 0 ? "" : _ref$search, _ref$hash = _ref.hash, hash = _ref$hash === void 0 ? "" : _ref$hash;
  if (search && search !== "?")
    pathname += search.charAt(0) === "?" ? search : "?" + search;
  if (hash && hash !== "#")
    pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
  return pathname;
}
function parsePath(path) {
  var parsedPath = {};
  if (path) {
    var hashIndex = path.indexOf("#");
    if (hashIndex >= 0) {
      parsedPath.hash = path.substr(hashIndex);
      path = path.substr(0, hashIndex);
    }
    var searchIndex = path.indexOf("?");
    if (searchIndex >= 0) {
      parsedPath.search = path.substr(searchIndex);
      path = path.substr(0, searchIndex);
    }
    if (path) {
      parsedPath.pathname = path;
    }
  }
  return parsedPath;
}

// node_modules/react-router/index.js
var import_prop_types = __toESM(require_prop_types());
var import_react = __toESM(require_react());
function f() {
  f = Object.assign || function(a) {
    for (var b = 1; b < arguments.length; b++) {
      var c = arguments[b], d;
      for (d in c)
        Object.prototype.hasOwnProperty.call(c, d) && (a[d] = c[d]);
    }
    return a;
  };
  return f.apply(this, arguments);
}
var k = true ? function(a) {
  return Object.freeze(a);
} : function(a) {
  return a;
};
function l(a, b) {
  if (!a)
    throw Error(b);
}
function m(a, b) {
  if (!a) {
    "undefined" !== typeof console && console.warn(b);
    try {
      throw Error(b);
    } catch (c) {
    }
  }
}
var p = {};
function q(a, b, c) {
  b || p[a] || (p[a] = true, true ? m(false, c) : void 0);
}
var r = (0, import_react.createContext)({ static: false });
r.displayName = "Location";
var v = (0, import_react.createContext)({ outlet: null, params: k({}), pathname: "", route: null });
v.displayName = "Route";
function w(a) {
  var b = a.children, c = a.initialEntries;
  a = a.initialIndex;
  var d = (0, import_react.useRef)();
  null == d.current && (d.current = createMemoryHistory({ initialEntries: c, initialIndex: a }));
  var e = d.current;
  c = (0, import_react.useReducer)(function(a2, c2) {
    return c2;
  }, { action: e.action, location: e.location });
  a = c[0];
  var g = c[1];
  (0, import_react.useLayoutEffect)(function() {
    return e.listen(g);
  }, [e]);
  return (0, import_react.createElement)(x, { children: b, action: a.action, location: a.location, navigator: e });
}
w.displayName = "MemoryRouter", w.propTypes = { children: import_prop_types.default.node, initialEntries: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.shape({ pathname: import_prop_types.default.string, search: import_prop_types.default.string, hash: import_prop_types.default.string, state: import_prop_types.default.object, key: import_prop_types.default.string })])), initialIndex: import_prop_types.default.number };
function y(a) {
  var b = a.to, c = a.replace, d = a.state;
  z() ? void 0 : true ? l(false, "<Navigate> may be used only in the context of a <Router> component.") : l(false);
  true ? m(!(0, import_react.useContext)(r).static, "<Navigate> must not be used on the initial render in a <StaticRouter>. This is a no-op, but you should modify your code so the <Navigate> is only ever rendered in response to some user interaction or state change.") : void 0;
  var e = A();
  (0, import_react.useEffect)(function() {
    e(b, {
      replace: c,
      state: d
    });
  });
  return null;
}
y.displayName = "Navigate", y.propTypes = { to: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.shape({ pathname: import_prop_types.default.string, search: import_prop_types.default.string, hash: import_prop_types.default.string })]).isRequired, replace: import_prop_types.default.bool, state: import_prop_types.default.object };
function B() {
  return C();
}
B.displayName = "Outlet", B.propTypes = {};
function D(a) {
  a = a.element;
  return void 0 === a ? (0, import_react.createElement)(B, null) : a;
}
D.displayName = "Route", D.propTypes = { caseSensitive: import_prop_types.default.bool, children: import_prop_types.default.node, element: import_prop_types.default.element, path: import_prop_types.default.string };
function x(a) {
  var b = a.children;
  b = void 0 === b ? null : b;
  var c = a.action;
  c = void 0 === c ? Action.Pop : c;
  var d = a.location, e = a.navigator;
  a = a.static;
  a = void 0 === a ? false : a;
  z() ? true ? l(false, "You cannot render a <Router> inside another <Router>. You never need more than one.") : l(false) : void 0;
  return (0, import_react.createElement)(r.Provider, { children: b, value: { action: c, location: d, navigator: e, static: a } });
}
x.displayName = "Router", x.propTypes = { children: import_prop_types.default.node, action: import_prop_types.default.oneOf(["POP", "PUSH", "REPLACE"]), location: import_prop_types.default.object.isRequired, navigator: import_prop_types.default.shape({ createHref: import_prop_types.default.func.isRequired, push: import_prop_types.default.func.isRequired, replace: import_prop_types.default.func.isRequired, go: import_prop_types.default.func.isRequired, block: import_prop_types.default.func.isRequired }).isRequired, static: import_prop_types.default.bool };
function E(a) {
  var b = a.basename;
  b = void 0 === b ? "" : b;
  a = F(a.children);
  return G(a, b);
}
E.displayName = "Routes", E.propTypes = { basename: import_prop_types.default.string, children: import_prop_types.default.node };
function z() {
  return null != (0, import_react.useContext)(r).location;
}
function H() {
  z() ? void 0 : true ? l(false, "useLocation() may be used only in the context of a <Router> component.") : l(false);
  return (0, import_react.useContext)(r).location;
}
function A() {
  z() ? void 0 : true ? l(false, "useNavigate() may be used only in the context of a <Router> component.") : l(false);
  var a = (0, import_react.useContext)(r).navigator, b = (0, import_react.useContext)(v).pathname, c = (0, import_react.useRef)(false);
  (0, import_react.useEffect)(function() {
    c.current = true;
  });
  return (0, import_react.useCallback)(function(d, e) {
    void 0 === e && (e = {});
    c.current ? "number" === typeof d ? a.go(d) : (d = J(d, b), (e.replace ? a.replace : a.push)(d, e.state)) : true ? m(false, "You should call navigate() in a useEffect, not when your component is first rendered.") : void 0;
  }, [a, b]);
}
function C() {
  return (0, import_react.useContext)(v).outlet;
}
function K(a) {
  var b = (0, import_react.useContext)(v).pathname;
  return (0, import_react.useMemo)(function() {
    return J(a, b);
  }, [a, b]);
}
function G(a, b) {
  void 0 === b && (b = "");
  var c = (0, import_react.useContext)(v), d = c.route, e = c.pathname, g = c.params;
  c = d && d.path, q(e, !d || d.path.endsWith("*"), 'You rendered descendant <Routes> (or called `useRoutes`) at "' + e + '" (under <Route path="' + (c + `">) but the parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

Please change the parent <Route path="`) + (c + '"> to <Route path="' + c + '/*">.'));
  b = b ? L([e, b]) : e;
  var h = H();
  return (d = (0, import_react.useMemo)(function() {
    return M(a, h, b);
  }, [h, a, b])) ? d.reduceRight(function(a2, c2) {
    var d2 = c2.pathname, e2 = c2.route;
    return (0, import_react.createElement)(v.Provider, { children: e2.element, value: { outlet: a2, params: k(f({}, g, {}, c2.params)), pathname: L([b, d2]), route: e2 } });
  }, null) : null;
}
function N(a) {
  return a.map(function(a2) {
    var c = { path: a2.path || "/", caseSensitive: true === a2.caseSensitive, element: a2.element || (0, import_react.createElement)(B, null) };
    a2.children && (c.children = N(a2.children));
    return c;
  });
}
function F(a) {
  var b = [];
  import_react.Children.forEach(a, function(a2) {
    if ((0, import_react.isValidElement)(a2))
      if (a2.type === import_react.Fragment)
        b.push.apply(b, F(a2.props.children));
      else {
        var c = { path: a2.props.path || "/", caseSensitive: true === a2.props.caseSensitive, element: a2 };
        a2.props.children && (a2 = F(a2.props.children), a2.length && (c.children = a2));
        b.push(c);
      }
  });
  return b;
}
function M(a, b, c) {
  void 0 === c && (c = "");
  "string" === typeof b && (b = parsePath(b));
  b = b.pathname || "/";
  if (c)
    if (c = c.replace(/^\/*/, "/").replace(/\/+$/, ""), b.startsWith(c))
      b = b === c ? "/" : b.slice(c.length);
    else
      return null;
  a = O(a);
  P(a);
  var d = null;
  for (c = 0; null == d && c < a.length; ++c)
    a: {
      d = b;
      for (var e = a[c][1], g = "/", h = {}, I = [], n2 = 0; n2 < e.length; ++n2) {
        var t2 = e[n2], u = "/" === g ? d : d.slice(g.length) || "/";
        u = Q({ path: t2.path, caseSensitive: t2.caseSensitive, end: n2 === e.length - 1 }, u);
        if (!u) {
          d = null;
          break a;
        }
        g = L([g, u.pathname]);
        h = f({}, h, {}, u.params);
        I.push({ route: t2, pathname: g, params: k(h) });
      }
      d = I;
    }
  return d;
}
function O(a, b, c, d, e) {
  void 0 === b && (b = []);
  void 0 === c && (c = "");
  void 0 === d && (d = []);
  void 0 === e && (e = []);
  a.forEach(function(a2, h) {
    var g = L([c, a2.path]), n2 = d.concat(a2);
    h = e.concat(h);
    a2.children && O(a2.children, b, g, n2, h);
    b.push([g, n2, h]);
  });
  return b;
}
function P(a) {
  var b = a.reduce(function(a2, b2) {
    b2 = b2[0];
    a2[b2] = R(b2);
    return a2;
  }, {});
  S(a, function(a2, d) {
    var c = a2[2];
    a2 = b[a2[0]];
    var g = d[2];
    d = b[d[0]];
    return a2 !== d ? d - a2 : T(c, g);
  });
}
var U = /^:\w+$/;
var V = 2;
var W = 1;
var X = 10;
var Y = -2;
function Z(a) {
  return "*" === a;
}
function R(a) {
  a = a.split("/");
  var b = a.length;
  a.some(Z) && (b += Y);
  return a.filter(function(a2) {
    return !Z(a2);
  }).reduce(function(a2, b2) {
    return a2 + (U.test(b2) ? V : "" === b2 ? W : X);
  }, b);
}
function T(a, b) {
  return a.length === b.length && a.slice(0, -1).every(function(a2, d) {
    return a2 === b[d];
  }) ? a[a.length - 1] - b[b.length - 1] : 0;
}
function S(a, b) {
  var c = a.slice(0);
  a.sort(function(a2, e) {
    return b(a2, e) || c.indexOf(a2) - c.indexOf(e);
  });
}
function Q(a, b) {
  "string" === typeof a && (a = { path: a });
  var c = a;
  a = c.path;
  var d = c.caseSensitive;
  c = c.end;
  c = aa(a, void 0 === d ? false : d, void 0 === c ? true : c);
  d = c[1];
  c = b.match(c[0]);
  if (!c)
    return null;
  b = c[1];
  var e = c.slice(2);
  d = d.reduce(function(a2, b2, c2) {
    c2 = e[c2];
    try {
      var d2 = decodeURIComponent(c2.replace(/\+/g, " "));
    } catch (t2) {
      true ? m(false, 'The value for the URL param "' + b2 + '" will not be decoded because the string "' + (c2 + '" is a malformed URL segment. This is probably due to a bad percent encoding (') + (t2 + ").")) : void 0, d2 = c2;
    }
    a2[b2] = d2;
    return a2;
  }, {});
  return { path: a, pathname: b, params: d };
}
function aa(a, b, c) {
  var d = [], e = "^(" + a.replace(/^\/*/, "/").replace(/\/?\*?$/, "").replace(/[\\.*+^$?{}|()[\]]/g, "\\$&").replace(/:(\w+)/g, function(a2, b2) {
    d.push(b2);
    return "([^\\/]+)";
  }) + ")";
  a.endsWith("*") ? (a.endsWith("/*") && (e += "\\/?"), d.push("*"), e += "(.*)") : c && (e += "\\/?");
  c && (e += "$");
  return [new RegExp(e, b ? void 0 : "i"), d];
}
function J(a, b) {
  void 0 === b && (b = "/");
  var c = "string" === typeof a ? parsePath(a) : a;
  a = c.pathname;
  var d = c.search;
  d = void 0 === d ? "" : d;
  c = c.hash;
  c = void 0 === c ? "" : c;
  return { pathname: a ? ba(a, a.startsWith("/") ? "/" : b) : b, search: d, hash: c };
}
function L(a) {
  return a.join("/").replace(/\/\/+/g, "/");
}
function ba(a, b) {
  var c = b.replace(/\/+$/, "").replace(/\/\/+/g, "/").split("/");
  a.replace(/\/\/+/g, "/").split("/").forEach(function(a2) {
    ".." === a2 ? 1 < c.length && c.pop() : "." !== a2 && c.push(a2);
  });
  return 1 < c.length ? L(c) : "/";
}
function generatePath(a, b) {
  void 0 === b && (b = {});
  return a.replace(/:(\w+)/g, function(a2, d) {
    null == b[d] ? true ? l(false, 'Missing ":' + d + '" param') : l(false) : void 0;
    return b[d];
  }).replace(/\/*\*$/, function() {
    return null == b["*"] ? "" : b["*"].replace(/^\/*/, "/");
  });
}
function useBlocker(a, b) {
  void 0 === b && (b = true);
  z() ? void 0 : true ? l(false, "useBlocker() may be used only in the context of a <Router> component.") : l(false);
  var c = (0, import_react.useContext)(r).navigator;
  (0, import_react.useEffect)(function() {
    if (b) {
      var d = c.block(function(b2) {
        var c2 = f({}, b2, { retry: function() {
          d();
          b2.retry();
        } });
        a(c2);
      });
      return d;
    }
  }, [c, a, b]);
}
function useHref(a) {
  z() ? void 0 : true ? l(false, "useHref() may be used only in the context of a <Router> component.") : l(false);
  var b = (0, import_react.useContext)(r).navigator;
  a = K(a);
  return b.createHref(a);
}
function useMatch(a) {
  z() ? void 0 : true ? l(false, "useMatch() may be used only in the context of a <Router> component.") : l(false);
  var b = H();
  return Q(a, b.pathname);
}
function useParams() {
  return (0, import_react.useContext)(v).params;
}
function useRoutes(a, b) {
  void 0 === b && (b = "");
  z() ? void 0 : true ? l(false, "useRoutes() may be used only in the context of a <Router> component.") : l(false);
  var c = (0, import_react.useMemo)(function() {
    return N(a);
  }, [a]);
  return G(c, b);
}

// node_modules/react-router-dom/index.js
var import_prop_types2 = __toESM(require_prop_types());
var import_react2 = __toESM(require_react());
function n() {
  n = Object.assign || function(a) {
    for (var d = 1; d < arguments.length; d++) {
      var b = arguments[d], c;
      for (c in b)
        Object.prototype.hasOwnProperty.call(b, c) && (a[c] = b[c]);
    }
    return a;
  };
  return n.apply(this, arguments);
}
function p2(a, d) {
  if (null == a)
    return {};
  var b = {}, c = Object.keys(a), e;
  for (e = 0; e < c.length; e++) {
    var f2 = c[e];
    0 <= d.indexOf(f2) || (b[f2] = a[f2]);
  }
  return b;
}
function q2(a, d) {
  if (a) {
    if ("string" === typeof a)
      return r2(a, d);
    var b = Object.prototype.toString.call(a).slice(8, -1);
    "Object" === b && a.constructor && (b = a.constructor.name);
    if ("Map" === b || "Set" === b)
      return Array.from(b);
    if ("Arguments" === b || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(b))
      return r2(a, d);
  }
}
function r2(a, d) {
  if (null == d || d > a.length)
    d = a.length;
  for (var b = 0, c = Array(d); b < d; b++)
    c[b] = a[b];
  return c;
}
function t(a) {
  var d = 0;
  if ("undefined" === typeof Symbol || null == a[Symbol.iterator]) {
    if (Array.isArray(a) || (a = q2(a)))
      return function() {
        return d >= a.length ? { done: true } : { done: false, value: a[d++] };
      };
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  d = a[Symbol.iterator]();
  return d.next.bind(d);
}
function v2(a, d) {
  if (!a) {
    "undefined" !== typeof console && console.warn(d);
    try {
      throw Error(d);
    } catch (b) {
    }
  }
}
function w2(a) {
  var d = a.children;
  a = a.window;
  var b = (0, import_react2.useRef)();
  null == b.current && (b.current = createBrowserHistory({ window: a }));
  var c = b.current;
  a = (0, import_react2.useReducer)(function(a2, b2) {
    return b2;
  }, { action: c.action, location: c.location });
  b = a[0];
  var e = a[1];
  (0, import_react2.useLayoutEffect)(function() {
    return c.listen(e);
  }, [c]);
  return (0, import_react2.createElement)(x, { children: d, action: b.action, location: b.location, navigator: c });
}
w2.displayName = "BrowserRouter", w2.propTypes = { children: import_prop_types2.default.node, window: import_prop_types2.default.object };
function x2(a) {
  var d = a.children;
  a = a.window;
  var b = (0, import_react2.useRef)();
  null == b.current && (b.current = createHashHistory({ window: a }));
  var c = b.current;
  a = (0, import_react2.useReducer)(function(a2, b2) {
    return b2;
  }, { action: c.action, location: c.location });
  b = a[0];
  var e = a[1];
  (0, import_react2.useLayoutEffect)(function() {
    return c.listen(e);
  }, [c]);
  return (0, import_react2.createElement)(x, { children: d, action: b.action, location: b.location, navigator: c });
}
x2.displayName = "HashRouter", x2.propTypes = { children: import_prop_types2.default.node, window: import_prop_types2.default.object };
var y2 = (0, import_react2.forwardRef)(function(a, d) {
  var b = a.onClick, c = a.replace, e = void 0 === c ? false : c, f2 = a.state, g = a.target, m2 = a.to;
  a = p2(a, ["onClick", "replace", "state", "target", "to"]);
  c = useHref(m2);
  var k2 = A(), u = H(), h = K(m2);
  return (0, import_react2.createElement)("a", Object.assign({}, a, { href: c, onClick: function(a2) {
    b && b(a2);
    a2.defaultPrevented || 0 !== a2.button || g && "_self" !== g || a2.metaKey || a2.altKey || a2.ctrlKey || a2.shiftKey || (a2.preventDefault(), a2 = !!e || createPath(u) === createPath(h), k2(m2, { replace: a2, state: f2 }));
  }, ref: d, target: g }));
});
y2.displayName = "Link", y2.propTypes = { onClick: import_prop_types2.default.func, replace: import_prop_types2.default.bool, state: import_prop_types2.default.object, target: import_prop_types2.default.string, to: import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.shape({ pathname: import_prop_types2.default.string, search: import_prop_types2.default.string, hash: import_prop_types2.default.string })]).isRequired };
var z2 = (0, import_react2.forwardRef)(function(a, d) {
  var b = a["aria-current"], c = void 0 === b ? "page" : b;
  b = a.activeClassName;
  var e = void 0 === b ? "active" : b;
  b = a.activeStyle;
  var f2 = a.caseSensitive, g = void 0 === f2 ? false : f2;
  f2 = a.className;
  var m2 = void 0 === f2 ? "" : f2;
  f2 = a.end;
  var k2 = void 0 === f2 ? false : f2, u = a.style;
  f2 = a.to;
  a = p2(a, "aria-current activeClassName activeStyle caseSensitive className end style to".split(" "));
  var h = H(), l2 = K(f2);
  h = h.pathname;
  l2 = l2.pathname;
  g || (h = h.toLowerCase(), l2 = l2.toLowerCase());
  c = (g = k2 ? h === l2 : h.startsWith(l2)) ? c : void 0;
  e = [m2, g ? e : null].filter(Boolean).join(" ");
  b = n({}, u, {}, g ? b : null);
  return (0, import_react2.createElement)(y2, Object.assign({}, a, { "aria-current": c, className: e, ref: d, style: b, to: f2 }));
});
z2.displayName = "NavLink", z2.propTypes = n({}, y2.propTypes, { "aria-current": import_prop_types2.default.oneOf("page step location date time true".split(" ")), activeClassName: import_prop_types2.default.string, activeStyle: import_prop_types2.default.object, className: import_prop_types2.default.string, style: import_prop_types2.default.object, to: import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.shape({ pathname: import_prop_types2.default.string, search: import_prop_types2.default.string, hash: import_prop_types2.default.string })]).isRequired });
function A2(a) {
  B2(a.message, a.when);
  return null;
}
A2.displayName = "Prompt", A2.propTypes = { message: import_prop_types2.default.string, when: import_prop_types2.default.bool };
function B2(a, d) {
  void 0 === d && (d = true);
  var b = (0, import_react2.useCallback)(function(b2) {
    window.confirm(a) && b2.retry();
  }, [a]);
  useBlocker(b, d);
}
function C2(a) {
  void 0 === a && (a = "");
  return new URLSearchParams("string" === typeof a || Array.isArray(a) || a instanceof URLSearchParams ? a : Object.keys(a).reduce(function(d, b) {
    var c = a[b];
    return d.concat(Array.isArray(c) ? c.map(function(a2) {
      return [b, a2];
    }) : [[b, c]]);
  }, []));
}
function useSearchParams(a) {
  true ? v2("undefined" !== typeof URLSearchParams, "You cannot use the `useSearchParams` hook in a browser that does not support the URLSearchParams API. If you need to support Internet Explorer 11, we recommend you load a polyfill such as https://github.com/ungap/url-search-params\n\nIf you're unsure how to load polyfills, we recommend you check out https://polyfill.io/v3/ which provides some recommendations about how to load polyfills only for users that need them, instead of for every user.") : void 0;
  var d = (0, import_react2.useRef)(C2(a)), b = H();
  a = (0, import_react2.useMemo)(function() {
    function a2() {
      var a3 = k2.value;
      c2.has(a3) || d.current.getAll(a3).forEach(function(b2) {
        c2.append(a3, b2);
      });
    }
    for (var c2 = C2(b.search), e2 = t(d.current.keys()), k2; !(k2 = e2()).done; )
      a2();
    return c2;
  }, [b.search]);
  var c = A(), e = (0, import_react2.useCallback)(function(a2, b2) {
    c("?" + C2(a2), b2);
  }, [c]);
  return [a, e];
}
export {
  w2 as BrowserRouter,
  x2 as HashRouter,
  y2 as Link,
  w as MemoryRouter,
  z2 as NavLink,
  y as Navigate,
  B as Outlet,
  A2 as Prompt,
  D as Route,
  x as Router,
  E as Routes,
  N as createRoutesFromArray,
  F as createRoutesFromChildren,
  C2 as createSearchParams,
  generatePath,
  Q as matchPath,
  M as matchRoutes,
  J as resolvePath,
  useBlocker,
  useHref,
  z as useInRouterContext,
  H as useLocation,
  useMatch,
  A as useNavigate,
  C as useOutlet,
  useParams,
  B2 as usePrompt,
  K as useResolvedPath,
  useRoutes,
  useSearchParams
};
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
*/
//# sourceMappingURL=react-router-dom.js.map
